
//fetchtest
    fetch('http://localhost:3000/characters')
    .then(response => response.json())
    .then(data => console.log(data))

//playercontainer
import React from 'react';
import { connect } from 'react-redux';
import { fetchAllPlayers } from '../actions/fetchAllPlayers';
import { Route, Switch } from 'react-router-dom'
import PlayerInput from '../components/PlayerInput';
import Players from '../components/Players';
import Player from '../components/Player'


class PlayerContainer extends React.Component {

  componentDidMount(){
    console.log('component didmount console', this.props)
    this.props.fetchAllPlayers()
  }

  render(){
    console.log('player container render console', this.props.players)
    return (
      <div>
        <h1>Player Container</h1>
        <Switch>
        < Route path='/players/new' component={PlayerInput} />
        < Route path='/players/:id' render={(routerProps)=> < Player {...routerProps} players = {this.props.players}/>}  />
        < Route exact path='/players' render={()=> < Players players = {this.props.players}/>}  />
        </Switch>
      </div>
    );
  }
}

const mapStateToProps = state => {
  return {
    players: state.players,
    loading: state.loading
  }
}
 
const mapDispatchToProps = dispatch => {
  return {
    fetchAllPlayers: () => dispatch(fetchAllPlayers())
  }
}
export default connect(mapStateToProps, mapDispatchToProps)(PlayerContainer)

                Submit all Players name and Press here to
                <NavLink to="/character-selection"> "Continue"...</NavLink>

-----
import React from 'react'
import { connect } from 'react-redux';
import { fetchAddPlayer } from '../actions/fetchAddPlayer'

class PlayerInput extends React.Component {

    state = {
        name: "",
        bio: "",
        favorite: "",
    }

    changeHandler = (e) => {
        this.setState({ [e.target.name]: e.target.value })
    }

    submitHandler = (e) => {
        console.log('submit new player')
        e.preventDefault()
        this.props.fetchAddPlayer(this.state)
        this.setState({ 
            name: "",
            bio: "",
            favorite: ""    
        })
    }
    render() {
        return (

            <form onSubmit={this.submitHandler}>
                <label>Player Name: </label><br></br>
                <input type="text" placeholder="Name" name="name" value={this.state.name} onChange={this.changeHandler} /><br></br>
                <label>Bio: </label><br></br>
                <input type="text" placeholder="Info" name="bio" value={this.state.bio} onChange={this.changeHandler} /><br></br>
                <label>Favorite Character: </label><br></br>
                <input type="text" placeholder="Whats your favorite" name="favorite" value={this.state.favorite} onChange={this.changeHandler} /><br></br>
                <input type="submit" value="Submit" /><br></br>
            </form>
        )
    }
}

export default connect(null, {fetchAddPlayer}) (PlayerInput)
----

     <button onClick={ () => this.gameOver(this.props.currentPlayer)}>END</button>

----

export const fetchUpdatePlayer = (player) =>{
    //action to update player wins
    console.log("fetching update on player", player)
    return (dispatch) => {
        fetch (`http://localhost:3000/players/${player.id}`, {
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }, 
            method: 'PATCH',
            body: JSON.stringify(player)
        })
        .then(response => response.json())
        .then(player => dispatch({type: 'UPDATE_PLAYER', payload: player}))
    }
}
